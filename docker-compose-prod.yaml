version: '3'
# x-airflow-common:
#   &airflow-common
#   env_file: ./.env
#   user: "${AIRFLOW_UID:-50000}:0"
#   depends_on:
#     &airflow-common-depends-on
#     redis:
#       condition: service_healthy
#     postgres:
#       condition: service_healthy
#   logging:
#     driver: awslogs
#     options: 
#       awslogs-group: air-quality
#       awslogs-region: us-east-1
#       awslogs-stream-prefix: airflow

services:
  # api:
  #   container_name: air-api
  #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/api:aws-init
  #   command: ./startup.sh
      # ports:
      # - target: 8100
      #   x-aws-protocol: http
  #   # ports:
  #   #   - 8100:8100
  #   env_file: ./.env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  # app:
  #   container_name: air-app
  #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/app:aws-init
  #   command: python wsgi.py
  #   ports:
  #     - target: 5000
  #       x-aws-protocol: http
  #   # ports:
  #   #   - 8000:5000
  #   env_file: ./.env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  postgres:
    image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/postgres:aws-init
    environment:
      POSTGRES_MULTIPLE_DATABASES: "air_quality,airflow"
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 15s
      retries: 5
    logging:
        driver: awslogs
        options: 
          awslogs-group: air-quality
          awslogs-region: us-east-1
          awslogs-stream-prefix: postgres

  redis:
    image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/redis:aws-init
    ports:
      - target: 6379
        x-aws-protocol: http
    # expose:
    #   - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 10
    logging:
        driver: awslogs
        options: 
          awslogs-group: air-quality
          awslogs-region: us-east-1
          awslogs-stream-prefix: redis

  # airflow-webserver:
  #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  #   <<: *airflow-common
  #   command: webserver
  #   ports:
  #     - target: 8080
  #       x-aws-protocol: http
  #   # ports:
  #   #   - 8080:8080
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-scheduler:
  #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  #   <<: *airflow-common
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-worker:
  #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  #   <<: *airflow-common
  #   command: celery worker
  #   healthcheck:
  #     test:
  #       - "CMD-SHELL"
  #       - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #     # Required to handle warm shutdown of the celery workers properly
  #     # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
  #   environment:
  #     DUMB_INIT_SETSID: "0"
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # # airflow-triggerer:
  # #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  # #   <<: *airflow-common
  # #   command: triggerer
  # #   healthcheck:
  # #     test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
  # #     interval: 10s
  # #     timeout: 10s
  # #     retries: 5
  # #   depends_on:
  # #     <<: *airflow-common-depends-on
  # #     airflow-init:
  # #       condition: service_completed_successfully

  # airflow-init:
  #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  #   <<: *airflow-common
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 4096M
  #   entrypoint: /bin/bash
  #   # yamllint disable rule:line-length
  #   command:
  #     - -c
  #     - |
  #       function ver() {
  #         printf "%04d%04d%04d%04d" $${1//./ }
  #       }
  #       airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
  #       airflow_version_comparable=$$(ver $${airflow_version})
  #       min_airflow_version=2.2.0
  #       min_airflow_version_comparable=$$(ver $${min_airflow_version})
  #       if (( airflow_version_comparable < min_airflow_version_comparable )); then
  #         echo
  #         echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
  #         echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
  #         echo
  #         exit 1
  #       fi
  #       if [[ -z "${AIRFLOW_UID}" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
  #         echo "If you are on Linux, you SHOULD follow the instructions below to set "
  #         echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
  #         echo "For other operating systems you can get rid of the warning with manually created .env file:"
  #         echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
  #         echo
  #       fi
  #       one_meg=1048576
  #       mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
  #       cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
  #       disk_available=$$(df / | tail -1 | awk '{print $$4}')
  #       warning_resources="false"
  #       if (( mem_available < 4000 )) ; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
  #         echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( cpus_available < 2 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
  #         echo "At least 2 CPUs recommended. You have $${cpus_available}"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( disk_available < one_meg * 10 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
  #         echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if [[ $${warning_resources} == "true" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
  #         echo "Please follow the instructions to increase amount of resources available:"
  #         echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
  #         echo
  #       fi
  #       mkdir -p /sources/logs /sources/dags /sources/plugins
  #       chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
  #       exec /entrypoint airflow version
  #   # yamllint enable rule:line-length
  #   environment:
  #     _AIRFLOW_DB_UPGRADE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  #     _PIP_ADDITIONAL_REQUIREMENTS: ''
  #   user: "0:0"

  # # airflow-cli:
  # #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  # #   <<: *airflow-common
  # #   environment:
  # #     CONNECTION_CHECK_MAX_COUNT: "0"
  # #   # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
  # #   command:
  # #     - bash
  # #     - -c
  # #     - airflow

  # # flower:
  # #   image: 605301634276.dkr.ecr.us-east-1.amazonaws.com/air-quality/airflow-common:aws-init
  # #   <<: *airflow-common
  # #   command: celery flower
  # #   ports:
  # #     - target: 5555
  # #       x-aws-protocol: http
  # #   # ports:
  # #   #   - 5555:5555
  # #   healthcheck:
  # #     test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
  # #     interval: 10s
  # #     timeout: 10s
  # #     retries: 5
  # #   depends_on:
  # #     <<: *airflow-common-depends-on
  # #     airflow-init:
  # #       condition: service_completed_successfully

volumes:
  postgres-db-volume: