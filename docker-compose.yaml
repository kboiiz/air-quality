version: '3'

x-airflow-common:
  &airflow-common
  env_file: .env
  volumes:
    - airflow_dags:/opt/airflow/dags
    - airflow_logs:/opt/airflow/logs
    - shared_models:/opt/airflow/dags/shared_models

services:
  api:
    container_name: air-api
    image: kboiiz/air-quality-api:latest
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    command: ./startup.sh
    ports:
      - 8100:8100
    volumes:
      - shared_models:/api/shared_models
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: kboiiz/air-quality-postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_AIR_QUALITY_USER: ${POSTGRES_AIR_QUALITY_USER}
      POSTGRES_AIR_QUALITY_USER_PW: ${POSTGRES_AIR_QUALITY_USER_PW}
      POSTGRES_AIRFLOW_USER: ${POSTGRES_AIRFLOW_USER}
      POSTGRES_AIRFLOW_USER_PW: ${POSTGRES_AIRFLOW_USER_PW}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 15s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    image: kboiiz/air-quality-airflow:latest
    command: webserver
    <<: *airflow-common
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    image: kboiiz/air-quality-airflow:latest
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    image: kboiiz/air-quality-airflow:latest
    <<: *airflow-common
    command: celery worker
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    image: kboiiz/air-quality-airflow:latest
    <<: *airflow-common
    command: version
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

volumes:
  postgres-db-volume:
  airflow_dags:
  airflow_logs:
  shared_models: